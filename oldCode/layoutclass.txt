import React, { useEffect, useState } from "react";
import "./pageStyle.css";
import Header from "../components/Header";
import Experience from "../components/Experience";
import Education from "../components/Education";
import Skill from "../components/Skill";
import { IUser } from "../models/IUser";
import { IUserExperience } from "../models/IUserExperience";
import { IUserEducation } from "../models/IUserEducation";
import { IUserSkill } from "../models/IUserSkill";

interface IProps {}
interface IState {
  header: IUser;
  experiences: IUserExperience[];
  education: IUserEducation[];
  skills: IUserSkill[];
}

export default class Layout extends React.Component<IProps, IState> {
  constructor(props: IProps) {
    super(props);
    this.state = {
      header: {
        name: "",
        title: "",
        objective: "",
        location: "",
        phone: "",
        email: "",
        website: "",
      },
      experiences: [
        {
          id: 0,
          title: "",
          company: "",
          start: new Date(),
          end: new Date(),
          description: "",
        },
      ],
      education: [{ id: 0, major: "", institution: "", date: new Date() }],
      skills: [{ id: 0, name: "" }],
    };
  }

  public experienceCount: number = 0 
  public educationCount: number = 0
  public skillCount: number = 0

  updateHeaderInput = (
    event:
      | React.ChangeEvent<HTMLInputElement>
      | React.ChangeEvent<HTMLTextAreaElement>
  ) => {
    let label: string = event.target.name;
    function isField(field: string) {
      if (field === label) {
        return true;
      } else {
        return false;
      }
    }
    let { name, title, objective, location, phone, email, website } =
      this.state.header;

    this.setState({
      header: {
        name: isField("name") ? event.target.value : name,
        title: isField("title") ? event.target.value : title,
        objective: isField("objective") ? event.target.value : objective,
        location: isField("location") ? event.target.value : location,
        phone: isField("phone") ? event.target.value : phone,
        email: isField("email") ? event.target.value : email,
        website: isField("website") ? event.target.value : website,
      },
    });
  };

  addExperience = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
    this.experienceCount+=1
    this.state.experiences.push({
        id: this.experienceCount,
        title: "",
        company: "",
        start: new Date(),
        end: new Date(),
        description: "",  
    })
    console.log(JSON.stringify(this.state.experiences))
    
  }

  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<IState>, snapshot?: any): void {
      this.render()
  }

  render() {
    return (
      <div className="layout-container">
        <div className="header-container">
          <Header
            header={this.state.header}
            updateHeaderInput={this.updateHeaderInput}
          />
        </div>
        <div className="section-heading-container">
          <h4 className="section-heading">Experience</h4>
          <button onClick={this.addExperience} className="add-section-button">
            Add Experience
          </button>
        </div>
        {this.state.experiences.length > 0 && this.state.experiences.map((experience, index) => {
          return <Experience key={index}/>
        })}
        <div className="view-contianer">
          <div className="header-view-container">
            <p>{this.state.header.name}</p>
            <p>{this.state.header.title}</p>
            <p>{this.state.header.objective}</p>
            <p>{this.state.header.location}</p>
            <p>{this.state.header.phone}</p>
            <p>{this.state.header.email}</p>
            <p>{this.state.header.website}</p>
          </div>
        </div>
      </div>
    );
  }
}

// let l: React.FC<IProps> = ({}) => {
//   let [experiences, setExperience] = useState(
//     [] as React.ReactComponentElement<any>[]
//   );
//   let [education, setEducation] = useState([] as React.ReactElement[]);
//   let [skills, setSkill] = useState([] as React.ReactElement[]);

//   // const experiences: React.ReactElement[] = []
//   // for(let i=0; i<1; i++) {
//   //   experiences.push(<Experience/>)
//   // }

//   useEffect(() => {}, [experiences, education, skills]);

//   let addExperience = (event: React.MouseEvent<HTMLButtonElement>) => {
//     event.preventDefault();
//     setExperience(experiences.concat(<Experience />));
//   };

//   let removeExperience = (
//     event: React.MouseEvent<HTMLButtonElement>,
//     key: number
//   ) => {
//     event.preventDefault();
//     let item = experiences![key];
//     let newArray = experiences!.filter((experience) => experience !== item);
//     setExperience(newArray);
//   };

//   let addEducation = (event: React.MouseEvent<HTMLButtonElement>) => {
//     event.preventDefault();
//     setEducation(education.concat(<Education />));
//   };

//   let removeEducation = (
//     event: React.MouseEvent<HTMLButtonElement>,
//     key: number
//   ) => {
//     event.preventDefault();
//     let item = education![key];
//     let newArray = education!.filter((record) => record !== item);
//     setEducation(newArray);
//   };

//   let addSkill = (event: React.MouseEvent<HTMLButtonElement>) => {
//     event.preventDefault();
//     setSkill(skills.concat(<Skill />));
//   };

//   let removeSkill = (
//     event: React.MouseEvent<HTMLButtonElement>,
//     key: number
//   ) => {
//     event.preventDefault();
//     let item = skills![key];
//     let newArray = skills!.filter((skill) => skill !== item);
//     setSkill(newArray);
//   };

//   return (
//     <div className="layout-container">
//       <div className="cv-form-container">
//         <form className="cv-form">
//           <div className="cv-form-header">
//             <Header />
//           </div>
//           <div className="cv-form-experience">
//             <div className="section-heading-container">
//               <h4 className="section-heading">Experience</h4>
//               <button onClick={addExperience} className="add-section-button">
//                 Add Experience
//               </button>
//             </div>
//             <Experience />
//             {experiences!.length > 0 &&
//               experiences!.map((experience, i) => {
//                 return (
//                   <div key={i}>
//                     <hr></hr>
//                     {experience}
//                     <button
//                       onClick={(event) => removeExperience(event, i)}
//                       className="delete-experience"
//                     >
//                       Remove Experience
//                     </button>
//                   </div>
//                 );
//               })}
//           </div>
//           <div className="cv-form-education">
//             <div className="section-heading-container">
//               <h4 className="section-heading">Education</h4>
//               <button onClick={addEducation} className="add-section-button">
//                 Add Education
//               </button>
//             </div>
//             <Education />
//             {education!.length > 0 &&
//               education!.map((item, i) => {
//                 return (
//                   <div key={i}>
//                     <hr></hr>
//                     {item}
//                     <button
//                       onClick={(event) => removeEducation(event, i)}
//                       className="delete-education"
//                     >
//                       Remove Education
//                     </button>
//                   </div>
//                 );
//               })}
//           </div>
//           <div className="cv-form-skill">
//             <div className="section-heading-container">
//               <h4 className="section-heading">Skills</h4>
//               <button className="add-section-button" onClick={addSkill}>
//                 Add Skills
//               </button>
//             </div>
//             <Skill />
//             {skills!.length > 0 &&
//               skills.map((skill, index) => {
//                 return (
//                   <div key={index} className="skill">
//                     {skill}
//                     <button
//                       className="delete-skill"
//                       onClick={(event) => removeSkill(event, index)}
//                     >
//                       Remove Skill
//                     </button>
//                   </div>
//                 );
//               })}
//           </div>
//         </form>
//       </div>
//       <div className="cv-setting-container"></div>
//     </div>
//   );
// };
